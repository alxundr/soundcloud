/*
 * File: app/controller/Songs.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SoundCloud.controller.Songs', {
    extend: 'Ext.app.Controller',

    stores: [
        'Songs'
    ],

    refs: [
        {
            ref: 'songsGrid',
            selector: '#songsGrid'
        },
        {
            ref: 'detailsPanel',
            selector: '#detailsPanel'
        },
        {
            ref: 'playlistGrid',
            selector: '#playlistGrid'
        },
        {
            ref: 'electronicGrid',
            selector: '#electronicGrid'
        },
        {
            ref: 'rockGrid',
            selector: '#rockGrid'
        }
    ],

    onSearchfieldEnter: function(field, e, eOpts) {
        if (e.getKey() == e.ENTER) {
            console.log(field.getValue() + ' was entered');
            var grid = this.getSongsGrid();
            grid.store.load({
                params: {
                    q: field.getValue(),
                    page: 1,
                    start: 0,
                    limit: 25
                }
            });
        }
    },

    onSongsGridSelect: function(rowmodel, record, index, eOpts) {
        this.addToPlaylist(record);
    },

    onPlaylistGridSelect: function(dataview, record, item, index, e, eOpts) {
        this.playTrack(record);

    },

    onPlaylistGridItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        e.stopEvent();
        this.ctxMenu = Ext.create('Ext.menu.Menu', {
            items:[{
                text: 'Remove from playlist'
            }],
            defaults: {
                listeners: {
                    click: function(item) {
                        this.getPlaylistGrid().store.remove([record]);
                        this.getPlaylistGrid().store.filter();
                    },
                    scope: this
                }
            }
        });

        this.ctxMenu.showAt(e.getXY());
    },

    onConnectbtnClick: function(button, e, eOpts) {
        SC.connect(function() {
          SC.get('/me', function(me) {
            console.log('Hello, ' + me.username);
          });
        });
    },

    onElectronicGridShow: function(component, eOpts) {
        var grid = this.getElectronicGrid();
        grid.store.load({
            params: {
                q: 'electronic',
                page: 1,
                start: 0,
                limit: 25
            }
        });
    },

    onElectronicGridSelect: function(rowmodel, record, index, eOpts) {
        this.addToPlaylist(record);
    },

    onRockGridSelect: function(rowmodel, record, index, eOpts) {
        this.addToPlaylist(record);
    },

    onRockGridShow: function(component, eOpts) {
        var grid = this.getRockGrid();
        grid.store.load({
            params: {
                q: 'rock',
                page: 1,
                start: 0,
                limit: 25
            }
        });
    },

    playTrack: function(record) {
        var detailsPanel = this.getDetailsPanel(),
            playOptions = {
                auto_play: true,
                buying: false,
                liking: false,
                sharing: false,
                show_comments: false,
                maxheight: 166
            },
            grid = this.getPlaylistGrid();

        detailsPanel.update(record.data);

        SC.oEmbed(record.data.permalink_url, playOptions, document.getElementById('player'));

        var me = this;

        setTimeout(function(){

            var widgetIframe = document.getElementById('player').getElementsByTagName('iframe')[0];
            var widget  = SC.Widget(widgetIframe);

            widget.bind(SC.Widget.Events.READY, function() {
                widget.bind(SC.Widget.Events.FINISH, function() {
                    console.log('track finished');

                    var nextIndex = grid.store.data.indexOf(record) + 1;
                    if (nextIndex < grid.store.data.length) {
                        record = grid.store.data.items[nextIndex];
                        grid.getSelectionModel().select(record,true,false);
                        me.playTrack(record);
                    }

                });
            });

        },2000);
    },

    addToPlaylist: function(record) {
        var grid = this.getPlaylistGrid();
        grid.store.add(record);
        /*if (grid.store.data.length === 1) {
                    this.playTrack(record);
                    grid.getSelectionModel().select(record,true,false);
                }*/
    },

    init: function(application) {
        this.control({
            "#searchfield": {
                specialkey: this.onSearchfieldEnter
            },
            "#songsGrid": {
                select: this.onSongsGridSelect
            },
            "#playlistGrid": {
                itemdblclick: this.onPlaylistGridSelect,
                itemcontextmenu: this.onPlaylistGridItemContextMenu
            },
            "#connectbtn": {
                click: this.onConnectbtnClick
            },
            "#electronicGrid": {
                show: this.onElectronicGridShow,
                select: this.onElectronicGridSelect
            },
            "#rockGrid": {
                select: this.onRockGridSelect,
                show: this.onRockGridShow
            }
        });
    }

});
